(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2343],{9945:function(n,e,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/article/algorithm/sort",function(){return i(3173)}])},3173:function(n,e,i){"use strict";i.r(e),i.d(e,{__N_SSG:function(){return d},default:function(){return m},description:function(){return x},frontMatter:function(){return a},tag:function(){return h},title:function(){return f},updated:function(){return g}});var t=i(4246),s=i(1670),r=i(7667),l=i(5360),c=i(3160),u=[1,2,50,42,32,36,39,69,89,46],o=function(){var n=(0,r.useMemo)(function(){return(0,l.x4)(u.slice(),"ascend")},[]),e=(0,r.useMemo)(function(){return(0,l.x4)(u.slice(),"descend")},[]),i=(0,r.useMemo)(function(){return(0,l.O5)(u.slice(),"ascend")},[]),s=(0,r.useMemo)(function(){return(0,l.O5)(u.slice(),"descend")},[]),o=(0,r.useMemo)(function(){return(0,l.OY)(u.slice(),"ascend")},[]),j=(0,r.useMemo)(function(){return(0,l.OY)(u.slice(),"descend")},[]);return(0,t.jsxs)("div",{children:[(0,t.jsx)("h3",{children:"原数据"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(u)}),(0,t.jsx)("h3",{children:"正序"}),(0,t.jsxs)("ol",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("i",{children:"冒泡"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(n)})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("i",{children:"选择"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(i)})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("i",{children:"插入"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(o)})]})]}),(0,t.jsx)("h3",{children:"倒序"}),(0,t.jsxs)("ol",{children:[(0,t.jsxs)("li",{children:[(0,t.jsx)("i",{children:"冒泡"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(e)})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("i",{children:"选择"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(s)})]}),(0,t.jsxs)("li",{children:[(0,t.jsx)("i",{children:"插入"}),(0,t.jsx)(c.EK,{language:"json",children:JSON.stringify(j)})]})]})]})},j=i(5685),d=!0,a={title:"排序算法",tag:["算法","web前端"],description:"js排序的几种算法",updated:"2023-04-10T10:51:13.000Z"},f="排序算法",h=["算法","web前端"],x="js排序的几种算法",g="2023-04-10T10:51:13.000Z",p=function(n){return(0,t.jsx)(j.s,n)};function S(n){var e=Object.assign({pre:"pre",code:"code"},(0,s.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-typescript",children:"\ntype SortRule = 'descend' | 'ascend';\n\n// 冒泡排序（默认升序）\nexport function bubbleSort(list: number[], rule: SortRule = 'ascend') {\n  let i = list.length - 1;\n  while (i > 0) {\n    let position = 0; // 记录最后一次发生交换的位置，大于position的部分说明无需排序\n    for (let j = 0; j < i; j += 1) {\n      const condition = rule === 'ascend' ? (list[j] > list[j + 1]) : (list[j] < list[j + 1]);\n      if (condition) {\n        position = j;\n        const temp = list[j];\n        list[j] = list[j + 1];\n        list[j + 1] = temp;\n      }\n    }\n    i = position;\n  }\n  return list;\n}\n\n// 选择排序\nexport function selectionSort(list: number[], rule: SortRule = 'ascend') {\n  let i = list.length - 1;\n  while (i > 0) {\n    let index = i;\n    let target = list[i];\n    for (let j = 0; j < i; j += 1) {\n      if (rule === 'ascend' ? (list[j] > target) : (list[j] < target)) {\n        index = j;\n        target = list[j];\n      }\n    }\n    // 每次循环都把最大/最小的值放到末尾\n    list[index] = list[i];\n    list[i] = target;\n    i -= 1;\n  }\n  return list;\n}\n\n// 插入排序\nexport function insertionSort(list: number[], rule: SortRule = 'ascend') {\n  for (let i = 0; i < list.length; i += 1) {\n    const value = list[i];\n    let j = i - 1;\n    for (; j > -1 && (rule === 'ascend' ? (list[j] > value) : (list[j] < value)); j -= 1) {\n      // 把 index < i 中大于/小于value的元素向前移一位\n      list[j + 1] = list[j];\n    }\n    // 插入value\n    list[j + 1] = value;\n  }\n  return list;\n}\n"})}),"\n","\n",(0,t.jsx)(o,{})]})}var m=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(p,Object.assign({},n,{children:(0,t.jsx)(S,n)}))}},3121:function(n){"use strict";n.exports=ReactTransitionGroup},9378:function(n){"use strict";n.exports=algoliasearch},7513:function(n){"use strict";n.exports=rxjs}},function(n){n.O(0,[9894,2128,3554,5685,9774,2888,179],function(){return n(n.s=9945)}),_N_E=n.O()}]);