(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1718],{8793:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/article/algorithm/trie",function(){return t(9015)}])},9015:function(n,e,t){"use strict";t.r(e),t.d(e,{__N_SSG:function(){return o},frontMatter:function(){return l},tag:function(){return d},title:function(){return c},updated:function(){return a}});var r=t(4246),i=t(1670),s=t(5685),o=!0,l={title:"Trie（前缀树、字典树、向量树）",tag:["算法"],updated:"2023-02-22T07:57:53.000Z"},c="Trie（前缀树、字典树、向量树）",d=["算法"],a="2023-02-22T07:57:53.000Z",u=function(n){return(0,r.jsx)(s.s,n)};function h(n){var e=Object.assign({h2:"h2",p:"p",ol:"ol",li:"li",img:"img",pre:"pre",code:"code",blockquote:"blockquote"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"基本概念",children:"基本概念"}),"\n",(0,r.jsx)(e.p,{children:"一般前缀树的三个基本性质"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"根节点不包含字符，除根节点外每一个节点都只包含一个字符。"}),"\n",(0,r.jsx)(e.li,{children:"从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。"}),"\n",(0,r.jsx)(e.li,{children:"每个节点的所有子节点包含的字符都不相同。"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://lemonied-1258997133.cos.ap-nanjing.myqcloud.com/static%2Ftrie%2F1.png",alt:"前缀树"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// 简单的前缀树（只能存储字符串）\nclass TrieNode {\n  nodes = {};\n  constructor() {\n    this.isEnd = false;\n    this.nodes = {};\n  }\n}\n\nclass Trie {\n  nodes = {};\n  constructor() {}\n  insert(str) {\n    let node = this;\n    for (let i = 0; i < str.length; i += 1) {\n      const v = str[i];\n      node.nodes[v] || (node.nodes[v] = new TrieNode());\n      node = node.nodes[v];\n      if (i === str.length - 1) node.isEnd = true;\n    }\n  }\n  search(str) {\n    let node = this;\n    for (let i = 0; i < str.length; i += 1) {\n      const v = str[i];\n      if (!node.nodes[v]) return false;\n      node = node.nodes[v];\n    }\n    return node.isEnd;\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"immutablejs",children:"ImmutableJS"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"持久化数据结构、结构共享"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Immutable，顾名思义，即不可变数据结构，所有的数据都是不可变的"}),"\n",(0,r.jsx)(e.h2,{id:"vector-trie",children:"Vector Trie"}),"\n",(0,r.jsx)(e.p,{children:"使用Array表示"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"var fruits = ['banana', 'grape', 'lemon', 'orange', 'apple'];\n\nvar fruits2 = fruits.slice();\nfruits.push('watermelon');\n"})}),"\n",(0,r.jsx)(e.p,{children:"使用向量树："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://lemonied-1258997133.cos.ap-nanjing.myqcloud.com/static%2Ftrie%2F2.webp",alt:"向量树"})}),"\n",(0,r.jsx)(e.p,{children:"插入节点 watermelon ："}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.img,{src:"https://lemonied-1258997133.cos.ap-nanjing.myqcloud.com/static%2Ftrie%2F3.webp",alt:"向量树"})}),"\n",(0,r.jsx)(e.h2,{id:"位分区",children:"位分区"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"const SHIFT = 3;\nconst NODE_SIZE = 1 << SHIFT;\n\nclass ArrayNode {\n  nodes = [];\n  get(idx) {\n    return this.nodes[idx];\n  }\n}\n\nclass List {\n  level = SHIFT;\n  root = new ArrayNode();\n  get(idx) {\n    return find(this.root, this.level, idx);\n  }\n}\n\n/**\n[0, 1, 2, 3, 4, 5, 6, 7]\nroot = ArrayNode([0, 1, 2, 3, 4, 5, 6, 7])\nlevel = 0b1000\n*/\n/**\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nroot = ArrayNode([\n  ArrayNode([0, 1, 2, 3, 4, 5, 6, 7]),\n  ArrayNode([8, 9])\n])\nlevel = 0b1000000\n*/\n// list.get(8) === list.get(0b001001) === 9\n\nfunction find(root, level, idx) {\n  let node = root;\n  while(level > SHIFT) {\n    level = level >>> SHIFT;\n    node = node.get(idx >>> level);\n    idx = ((1 << level) - 1) & idx;\n  }\n  return node.get(idx);\n}\n\n"})})]})}e.default=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,r.jsx)(u,Object.assign({},n,{children:(0,r.jsx)(h,n)}))}},3121:function(n){"use strict";n.exports=ReactTransitionGroup},9378:function(n){"use strict";n.exports=algoliasearch},7513:function(n){"use strict";n.exports=rxjs}},function(n){n.O(0,[9894,2128,3554,5685,9774,2888,179],function(){return n(n.s=8793)}),_N_E=n.O()}]);