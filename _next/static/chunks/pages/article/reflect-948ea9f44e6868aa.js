(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9316],{7894:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/article/reflect",function(){return n(5858)}])},5858:function(t,e,n){"use strict";n.r(e),n.d(e,{__N_SSG:function(){return E},default:function(){return F},description:function(){return I},frontMatter:function(){return S},tag:function(){return D},title:function(){return N},updated:function(){return k}});var r,a,c,o,i=n(4246),s=n(1670),u=n(53),l=n(7667),d=n(2900),p=n(5118),f=n(5322),h=n(9312);n(8706);var g=function(){return function(){}},m=function(){function t(){(0,d._)(this,t)}return t.prototype.method=function(){return"this is other service"},t}();m=(0,h.gn)([g()],m);var j=function(){function t(e){(0,d._)(this,t),this.other=e}return t.prototype.speak=function(){return"".concat(this.other.method()," and 汪汪汪")},t}();j=(0,h.gn)([g(),(0,h.w6)("design:type",Function),(0,h.w6)("design:paramtypes",[void 0===m?Object:m])],j);var y=function(){function t(e){(0,d._)(this,t),this.abilities=e}return t.prototype.speak=function(){return this.abilities.speak()},t}();y=(0,h.gn)([g(),(0,h.w6)("design:type",Function),(0,h.w6)("design:paramtypes",[void 0===j?Object:j])],y);var v="path",x="method",b=Symbol("Injectable"),M=Symbol("Route"),R=function(t){return function(e){return function(n,r,a){Reflect.getMetadata("design:type",n,r)===Function&&(Reflect.defineMetadata(M,!0,a.value),Reflect.defineMetadata(x,t,a.value),Reflect.defineMetadata(v,e,a.value))}}},T=R("get"),_=R("post"),A=function(){function t(){(0,d._)(this,t)}var e=t.prototype;return e.getList=function(){return"this is a list"},e.create=function(){return"create an item"},t}();(0,h.gn)([T("/list"),(0,h.w6)("design:type",Function),(0,h.w6)("design:paramtypes",[])],A.prototype,"getList",null),(0,h.gn)([_("/create"),(0,h.w6)("design:type",Function),(0,h.w6)("design:paramtypes",[])],A.prototype,"create",null);var w=(c=Object.getOwnPropertyNames(a=Object.getPrototypeOf(r=function t(e){if(!Reflect.getMetadata(b,e))throw Error("".concat(e.name," must be injectable"));var n=(Reflect.getMetadata("design:paramtypes",e)||[]).map(function(e){return t(e)});return(0,p._)(e,(0,f._)(n))}(A=(0,h.gn)([function(t){Reflect.defineMetadata(b,!0,t),Reflect.defineMetadata(v,"/api",t)}],A)))).filter(function(t){var e;return e=a[t],!!Reflect.getMetadata(M,e)}),o=Reflect.getMetadata(v,r.constructor),c.map(function(t){var e=a[t];return{basePath:o,method:Reflect.getMetadata(x,e),route:Reflect.getMetadata(v,e),fn:e,name:t}})),O=function(){var t=(0,l.useRef)((0,l.useMemo)(function(){return function t(e){var n=(Reflect.getMetadata("design:paramtypes",e)||[]).map(function(e){return t(e)});return(0,p._)(e,(0,f._)(n))}(y)},[]));return(0,i.jsxs)("div",{children:[(0,i.jsxs)("pre",{children:[(0,i.jsx)("div",{children:"const dog = factory(DogService);"}),(0,i.jsx)("div",{children:"dog.speak();"})]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("span",{children:"output："}),(0,i.jsx)("span",{children:t.current.speak()})]})]})},C=function(){var t=(0,u._)((0,l.useState)(""),2),e=t[0],n=t[1];return(0,l.useEffect)(function(){n(JSON.stringify(w,function(t,e){return"function"==typeof e?e.toString():e},2))},[]),(0,i.jsx)("div",{children:(0,i.jsx)("pre",{children:e})})},P=n(5685),E=!0,S={title:"Reflect Metadata",description:"js中的元信息",tag:["typescript","reflect","web前端"],updated:"2023-02-22T07:57:53.000Z"},N="Reflect Metadata",I="js中的元信息",D=["typescript","reflect","web前端"],k="2023-02-22T07:57:53.000Z",H=function(t){return(0,i.jsx)(P.s,t)};function J(t){var e=Object.assign({h1:"h1",ol:"ol",li:"li",p:"p",h2:"h2",pre:"pre",code:"code"},(0,s.ah)(),t.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:"什么是reflect-metadata",children:"什么是Reflect metadata"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"其他 C#、Java、Pythone 语言已经有的高级功能，我 JS 也应该要有（诸如C＃ 和 Java 之类的语言支持将元数据添加到类型的属性或注释，以及用于读取元数据的反射API，而目前 JS 缺少这种能力）"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"许多用例（组合/依赖注入，运行时类型断言，反射/镜像，测试）都希望能够以一致的方式向类中添加其他元数据。"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"为了使各种工具和库能够推理出元数据，需要一种标准一致的方法；"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"元数据不仅可以用在对象上，也可以通过相关捕获器用在 Proxy 上"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"对开发人员来说，定义新的元数据生成装饰器应该简洁易用；"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"ts配置",children:"TS配置"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "experimentalDecorators": true,\n    "emitDecoratorMetadata": true\n  }\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"安装reflect-metadata",children:"安装reflect-metadata"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-bash",children:"npm install reflect-metadata\n"})}),"\n",(0,i.jsx)(e.h1,{id:"示例",children:"示例"}),"\n",(0,i.jsx)(e.h2,{id:"依赖注入-di",children:"依赖注入 DI"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import 'reflect-metadata';\n\ninterface Constructor<T=any> {\n  new (...args: any[]): T;\n}\n\nconst Injectable = (): ClassDecorator => () => {\n  //\n};\n\n@Injectable()\nclass OtherService {\n  public method() {\n    return 'this is other service';\n  }\n}\n\n@Injectable()\nclass AbilityService {\n  constructor(\n    private other: OtherService,\n  ) {}\n  public speak() {\n    return `${this.other.method()} and 汪汪汪`;\n  }\n}\n\n@Injectable()\nclass DogService {\n  constructor(\n    private abilities: AbilityService,\n  ) {}\n  public speak() {\n    return this.abilities.speak();\n  }\n}\n\nexport { DogService };\n\nexport function factory<T>(target: Constructor<T>): T {\n  const providers = Reflect.getMetadata('design:paramtypes', target) || [];\n  const args = providers.map((provider: Constructor) => factory(provider));\n  return new target(...args);\n}\n"})}),"\n","\n",(0,i.jsx)(O,{}),"\n",(0,i.jsx)(e.h2,{id:"controller-控制器",children:"Controller 控制器"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import 'reflect-metadata';\n\ninterface Constructor<T=any> {\n  new (...args: any[]): T;\n}\n\nconst PATH_MATA = 'path';\nconst METHOD_MATA = 'method';\nconst INJECTABLE = Symbol('Injectable');\nconst ROUTE = Symbol('Route');\n\nconst Injectable = (): ClassDecorator => target => {\n  Reflect.defineMetadata(INJECTABLE, true, target);\n};\nconst isInjectable = <T>(constructor: Constructor<T>) => {\n  return !!Reflect.getMetadata(INJECTABLE, constructor);\n};\nconst isRoute = (target: any) => {\n  return !!Reflect.getMetadata(ROUTE, target);\n};\n\nconst Controller = (basePath: string): ClassDecorator => target => {\n  Injectable()(target);\n  Reflect.defineMetadata(PATH_MATA, basePath, target);\n};\n\nconst createRoute = (method: string) => (path: string): MethodDecorator => (target, propertyKey, descriptor: TypedPropertyDescriptor<any>) => {\n  const type = Reflect.getMetadata('design:type', target, propertyKey);\n  if (type === Function) {\n    Reflect.defineMetadata(ROUTE, true, descriptor.value);\n    Reflect.defineMetadata(METHOD_MATA, method, descriptor.value);\n    Reflect.defineMetadata(PATH_MATA, path, descriptor.value);\n  }\n};\n\nconst Get = createRoute('get');\nconst Post = createRoute('post');\n\nfunction mappingRoutes(instance: any) {\n  const prototype = Object.getPrototypeOf(instance);\n  const methodNames = Object.getOwnPropertyNames(prototype).filter(name => isRoute(prototype[name]));\n  const basePath = Reflect.getMetadata(PATH_MATA, instance.constructor);\n  return methodNames.map(name => {\n    const fn = prototype[name];\n    return {\n      basePath,\n      method: Reflect.getMetadata(METHOD_MATA, fn),\n      route: Reflect.getMetadata(PATH_MATA, fn),\n      fn,\n      name,\n    };\n  });\n}\n\nexport function factory<T>(target: Constructor<T>): T {\n  if (!isInjectable(target)) {\n    throw new Error(`${target.name} must be injectable`);\n  }\n  const providers = Reflect.getMetadata('design:paramtypes', target) || [];\n  const args = providers.map((provider: Constructor) => factory(provider));\n  return new target(...args);\n}\n\n@Controller('/api')\nclass TestController {\n  @Get('/list')\n  getList() {\n    return 'this is a list';\n  }\n  @Post('/create')\n  create() {\n    return 'create an item';\n  }\n}\n\nexport const test = mappingRoutes(factory(TestController));\n"})}),"\n",(0,i.jsx)(C,{})]})}var F=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.jsx)(H,Object.assign({},t,{children:(0,i.jsx)(J,t)}))}},3121:function(t){"use strict";t.exports=ReactTransitionGroup},9378:function(t){"use strict";t.exports=algoliasearch},7513:function(t){"use strict";t.exports=rxjs}},function(t){t.O(0,[9894,2128,3554,8706,5685,9774,2888,179],function(){return t(t.s=7894)}),_N_E=t.O()}]);